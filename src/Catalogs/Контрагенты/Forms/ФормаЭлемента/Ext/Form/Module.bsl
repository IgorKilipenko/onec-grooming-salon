#Область ОписаниеПеременных

// Хранит кэш массива ссылок на поля формы доступные только при ТипеКонтрагента == Клиент (Только для чтения). \
// Для доступа к полю использовать функцию: получитьПоляТолькоДляКлиента()
Перем __ПоляТолькоДляКлиента__;

// Хранит кэш массива ссылок на поля формы доступные только при ТипеКонтрагента == Поставщик (Только для чтения). \
// Для доступа к полю использовать функцию: получитьПоляТолькоДляПоставщика()
Перем __ПоляТолькоДляПоставщика__;

// Хранит значение заголовка для поля формы Наименование введенное в
// конструкторе заголовокПоляНаименованиеПоУмолчанию (Только для чтения). \
// Для доступа к полю использовать функцию: получитьЗаголовокПоляНаименованиеПоУмолчанию()
&НаКлиенте
Перем __ЗаголовокПоляНаименованиеПоУмолчанию__;

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

// Обработчик события формы ПриОткрытии (НаКлиенте)
// Параметры:
// _ - ЭлементФормы - не используется в текущей реализации
&НаКлиенте
Процедура ПриОткрытии(_)
    __ЗаголовокПоляНаименованиеПоУмолчанию__ = Элементы.Наименование.Заголовок;

    Объект.ТипКонтрагента = ?(Объект.ТипКонтрагента.Пустая(),
            получитьЗначениеТипаКонтрагента(стрПредставлениеКлиент()), Объект.ТипКонтрагента);

    настройкаВидаФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(отказ, __)
    Если этоКлиент() Тогда
        очиститьПоляПоставщика();
        Объект.Родитель = получитьПредопределенныйЭлемент(стрПредставлениеКлиент(Истина));
    ИначеЕсли этоПоставщик() Тогда
        очиститьПоляКлиента();
        Если Объект.ОсновнойДоговор.Пустая() Тогда
            ПоказатьПредупреждение( , "Основной договор не выбран для поставщика.");
        КонецЕсли;
        Объект.Родитель = получитьПредопределенныйЭлемент(стрПредставлениеПоставщик(Истина));
    Иначе
        отказ = Истина;
        ПоказатьПредупреждение( , "Операция не может быть выполнена. Тип клиента не определен.");
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обработчик события поля формы ПриИзменении / для поля ТипКонтрагента (НаКлиенте)
// Параметры:
// _ - ЭлементФормы - не используется в текущей реализации
&НаКлиенте
Процедура ТипКонтрагентаПриИзменении(_)
    настройкаВидаФормы();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОтображенияФормы
// Выполняет настройку полей формы в соответствии
// с выбранным значением Типа Контрагента / Клиент или Поставщик (НаКлиенте)
&НаКлиенте
Процедура настройкаВидаФормы()
    этоКлиент_ = этоКлиент();
    настроитьВидФормыДляКлиента(этоКлиент_);

    этоПоставщик_ = ?(этоКлиент_, Ложь, этоПоставщик());
    настроитьВидФормыДляПоставщика(этоПоставщик_);
КонецПроцедуры

// Параметры:
// 	этоКлиент - Булево
&НаКлиенте
Процедура настроитьВидФормыДляКлиента(этоКлиент)
    Для Каждого полеФормы Из получитьПоляФормыТолькоДляКлиента() Цикл
        полеФормы.Видимость = этоКлиент;
    КонецЦикла;

    Если этоКлиент Тогда
        Элементы.Наименование.Заголовок = "Ф.И.О. клиента";
    КонецЕсли;
КонецПроцедуры

// Параметры:
// 	этоПоставщик - Булево
&НаКлиенте
Процедура настроитьВидФормыДляПоставщика(этоПоставщик)
    Для Каждого полеФормы Из получитьПоляФормыТолькоДляПоставщика() Цикл
        полеФормы.Видимость = этоПоставщик;
    КонецЦикла;

    Если этоПоставщик Тогда
        Элементы.Наименование.Заголовок = получитьЗаголовокПоляНаименованиеПоУмолчанию();
    КонецЕсли;

    Элементы.ОсновнойДоговор.АвтоОтметкаНезаполненного = ?(этоПоставщик, Истина, Ложь);
КонецПроцедуры

// Параметры:
//  коллекцияПолейФормы - КоллекцияПолейФормы - коллекция объектов полей формы
&НаКлиенте
Процедура очиститьПоля(коллекцияПолейФормы)
    Для Каждого поле Из коллекцияПолейФормы Цикл
        Если (ТипЗнч(поле) = Тип("ТаблицаФормы")) И (ТипЗнч(Объект[поле.Имя]) =
                Тип("ДанныеФормыКоллекция")) Тогда
            Объект[поле.Имя].Очистить();
        Иначе
            Объект[поле.Имя] = NULL;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

// Выполняет очистку полей формы используемых только для Поставщика
&НаКлиенте
Процедура очиститьПоляПоставщика()
    очиститьПоля(получитьПоляФормыТолькоДляПоставщика());
КонецПроцедуры

// Выполняет очистку полей формы используемых только для Клиента
&НаКлиенте
Процедура очиститьПоляКлиента()
    очиститьПоля(получитьПоляФормыТолькоДляКлиента());
КонецПроцедуры
#КонецОбласти // НастройкиОтображенияФормы

#Область ПриватныеСвойства
// Возвращаемое значение:
// 	Массив - массив полей формы доступных только для Клиента
&НаКлиенте
Функция получитьПоляФормыТолькоДляКлиента()
    // [Можно лучше!] В перспективе в конструкторе формы лучше создать группу
    // для группировки специальных полей типа контрагента
    __ПоляТолькоДляКлиента__ = ?(__ПоляТолькоДляКлиента__ <> Неопределено,
            __ПоляТолькоДляКлиента__, Новый Массив);

    Если __ПоляТолькоДляКлиента__.Количество() = 0 Тогда
        __ПоляТолькоДляКлиента__.Добавить(Элементы.Пол);
        __ПоляТолькоДляКлиента__.Добавить(Элементы.ДатаРождения);
        __ПоляТолькоДляКлиента__.Добавить(Элементы.Источник);
        __ПоляТолькоДляКлиента__.Добавить(Элементы.Питомцы);
    КонецЕсли;

    Возврат __ПоляТолькоДляКлиента__;
КонецФункции

// Возвращаемое значение:
// 	Массив - массив полей формы доступных только для Поставщика
&НаКлиенте
Функция получитьПоляФормыТолькоДляПоставщика()
    __ПоляТолькоДляПоставщика__ = ?(__ПоляТолькоДляПоставщика__ <> Неопределено,
            __ПоляТолькоДляПоставщика__, Новый Массив);
    Если __ПоляТолькоДляПоставщика__.Количество() = 0 Тогда
        __ПоляТолькоДляПоставщика__.Добавить(Элементы.ОсновнойДоговор);
    КонецЕсли;

    Возврат __ПоляТолькоДляПоставщика__;
КонецФункции

// Функция этоКлиент (НаКлиенте)
// Возвращаемое значение:
// 	Булево - Истина, если текущий элемент это Клиент
&НаКлиенте
Функция этоКлиент()
    Возврат Объект.ТипКонтрагента = получитьЗначениеТипаКонтрагента(стрПредставлениеКлиент());
КонецФункции

// Функция этоПоставщик (НаКлиенте)
// Возвращаемое значение:
// 	Булево - Истина, если текущий элемент это Поставщик
&НаКлиенте
Функция этоПоставщик()
    Возврат Объект.ТипКонтрагента = получитьЗначениеТипаКонтрагента(стрПредставлениеПоставщик());
КонецФункции
#КонецОбласти // ПриватныеСвойства

#Область Утилиты
// Получить значение типа контрагента (НаСервере)
// Параметры:
//	имяТипаКонтрагента - Строка - строковое значение из Перечисления.ТипыКонтрагентов
// Возвращаемое значение:
// 	Перечисления.ТипыКонтрагентов.ТипКонтрагента
&НаКлиенте
Функция получитьЗначениеТипаКонтрагента(имяТипаКонтрагента)
    Возврат ПредопределенноеЗначение(СтрШаблон("Перечисление.ТипыКонтрагентов.%1", имяТипаКонтрагента));
КонецФункции

&НаКлиенте
Функция получитьПредопределенныйЭлемент(имяПредопределенного)
    Попытка
        Возврат ПредопределенноеЗначение(СтрШаблон("Справочник.Контрагенты.%1", имяПредопределенного));
    Исключение
        Возврат NULL;
    КонецПопытки;
КонецФункции

// Функция получитьЗаголовокПоляНаименованиеПоУмолчанию (НаКлиенте)
// Возвращаемое значение:
// 	Строка - значение заголовка для поля формы Наименование введенное в конструкторе
&НаКлиенте
Функция получитьЗаголовокПоляНаименованиеПоУмолчанию()
    Возврат __ЗаголовокПоляНаименованиеПоУмолчанию__;
КонецФункции
#КонецОбласти // Утилиты

#Область СтроковыеЛитералы
// Строковое представление ключа - Поставщик
// Параметры:
//  этоГруппа - Булево - По умолчанию = Ложь
// Возвращаемое значение:
// 	Строка - значение имени реквизита Поставщик
&НаКлиенте
Функция стрПредставлениеПоставщик(этоГруппа = Ложь)
    Возврат СтрШаблон("Поставщик%1", ?(этоГруппа, "и", ""));
КонецФункции

// Строковое представление ключа - Поставщик
// Параметры:
//  этоГруппа - Булево - По умолчанию = Ложь
// Возвращаемое значение:
// 	Строка - значение имени реквизита Клиент
&НаКлиенте
Функция стрПредставлениеКлиент(этоГруппа = Ложь)
    Возврат СтрШаблон("Клиент%1", ?(этоГруппа, "ы", ""));
КонецФункции
#КонецОбласти // СтроковыеЛитералы

#КонецОбласти // СлужебныеПроцедурыИФункции
