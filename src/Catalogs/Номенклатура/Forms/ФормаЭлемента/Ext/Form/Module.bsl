#Область ОписаниеПеременных

// Содержит ссылки на объекты предопределенных групп номенклатуры (Только для чтения)
&НаКлиенте
Перем _ГруппыНоменклатуры;

// Содержит значения из Перечисление.ТипыНоменклатуры (Только для чтения)
&НаКлиенте
Перем _ТипыНоменклатуры;

&НаКлиенте
Перем _ПланСчетов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(_, __)
    Если НЕ Объект.Ссылка.Пустая() Тогда
        ЭтотОбъект.ТекущаяРозничнаяЦена = РаботаСЦенамиВызовСервера.ПолучитьЦенуПродажиНаДату(Объект.Ссылка);
    КонецЕсли;
КонецПроцедуры

// Обработчик события формы ПриОткрытии
// Параметры:
// _ - ЭлементФормы - не используется в текущей реализации
&НаКлиенте
Процедура ПриОткрытии(_)
    инициализация();

    Если Объект.Ссылка.Пустая() Тогда
        Объект.Родитель = ?(ЗначениеЗаполнено(Объект.Родитель), Объект.Родитель, _ГруппыНоменклатуры.Товары);
        установитьТипНоменклатуры();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(отказ, __)
    Если Объект.Родитель.Пустая() Тогда
        установитьРодителя();
    КонецЕсли;

    сообщение = проверитьЗаполнениеРодителя();
    Если проверитьЗаполнениеРодителя() <> Неопределено Тогда
        сообщение.Сообщить();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(_)
    установитьРодителя();
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(_)
    установитьТипНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура СчетБухгалтерскогоУчетаНачалоВыбора(_, данныеВыбора, __, стандартнаяОбработка)
    стандартнаяОбработка = Ложь;

    списокДоступныхЗначений = Новый СписокЗначений;
    Если Объект.ТипНоменклатуры = _ТипыНоменклатуры.Товар Тогда
        списокДоступныхЗначений.Добавить(_ПланСчетов.Товары);
    ИначеЕсли Объект.ТипНоменклатуры = _ТипыНоменклатуры.Материал Тогда
        списокДоступныхЗначений.Добавить(_ПланСчетов.Материалы);
    ИначеЕсли Объект.ТипНоменклатуры = _ТипыНоменклатуры.Услуга Тогда
        списокДоступныхЗначений.Добавить(_ПланСчетов.РасходыНаПродажу);
        списокДоступныхЗначений.Добавить(_ПланСчетов.ПрочиеДоходыИРасходы);
    КонецЕсли;

    данныеВыбора = списокДоступныхЗначений;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьЦену(_)
    Если Объект.Ссылка.Пустая() Тогда
        сообщение_ = Новый СообщениеПользователю();
        сообщение_.Текст = "Перед установкой цены необходимо записать документ!";
        сообщение_.Сообщить();
    Иначе
        ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаСозданияЦены",
            Новый Структура("Номенклатура", Объект.Ссылка), , , , ,
            Новый ОписаниеОповещения("_послеИзмененияЦены_ОВ", ЭтотОбъект),
            РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура установитьРодителя()
    Если этоТовар() Тогда
        Объект.Родитель = _ГруппыНоменклатуры.Товары;
    ИначеЕсли этоМатериал() Тогда
        Объект.Родитель = _ГруппыНоменклатуры.Материалы;
    ИначеЕсли этоУслуга() Тогда
        Объект.Родитель = _ГруппыНоменклатуры.Услуги;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура установитьТипНоменклатуры()
    Если Объект.Родитель.Пустая() Тогда
        Возврат;
    КонецЕсли;

    Если Объект.Родитель = _ГруппыНоменклатуры.Товары Тогда
        Объект.ТипНоменклатуры = _ТипыНоменклатуры.Товар;
        Объект.СчетБухгалтерскогоУчета = _ПланСчетов.Товары;
    ИначеЕсли Объект.Родитель = _ГруппыНоменклатуры.Материалы Тогда
        Объект.ТипНоменклатуры = _ТипыНоменклатуры.Материал;
        Объект.СчетБухгалтерскогоУчета = _ПланСчетов.Материалы;
    ИначеЕсли Объект.Родитель = _ГруппыНоменклатуры.Услуги Тогда
        Объект.ТипНоменклатуры = _ТипыНоменклатуры.Услуга;
        Объект.СчетБухгалтерскогоУчета = _ПланСчетов.РасходыНаПродажу;
    КонецЕсли;
КонецПроцедуры

// Возвращаемое значение:
// 	Булево - Истина, если текущий элемент это Материал
&НаКлиенте
Функция этоМатериал()
    Возврат Объект.ТипНоменклатуры = _ТипыНоменклатуры.Материал;
КонецФункции

// Возвращаемое значение:
// 	Булево - Истина, если текущий элемент это Товар
&НаКлиенте
Функция этоТовар()
    Возврат Объект.ТипНоменклатуры = _ТипыНоменклатуры.Товар;
КонецФункции

// Возвращаемое значение:
// 	Булево - Истина, если текущий элемент это Услуга
&НаКлиенте
Функция этоУслуга()
    Возврат Объект.ТипНоменклатуры = _ТипыНоменклатуры.Услуга;
КонецФункции

// Выполняет проверку заполнения поля Родитель. Если поле не заполнено - формирует сообщение
// с предупреждением для пользователя.
//
// Возвращаемое значение:
//  - СообщениеПользователю - в случае если проверка не пройдена - возвращает сообщение, иначе: Неопределено
//  - Неопределено
//
&НаКлиенте
Функция проверитьЗаполнениеРодителя()
    сообщение = Неопределено;

    Если Объект.Родитель.Пустая() Тогда
        сообщение = Новый СообщениеПользователю();
        сообщение.Текст = "Поле ""Родитель"" не заполнено";
        сообщение.Поле = Элементы.Родитель.Имя;
        сообщение.КлючДанных = Объект.Ссылка;
        сообщение.ПутьКДанным = "Объект";
    КонецЕсли;

    Возврат сообщение;
КонецФункции

&НаКлиенте
Функция получитьКонтекстДиагностики(Знач имяФункции = Неопределено)
    базовыйКонтекстДиагностики = "Номенклатура.ФормаЭлемента";
    Возврат ?(имяФункции = Неопределено, базовыйКонтекстДиагностики, СтрШаблон("%1.%2", базовыйКонтекстДиагностики, имяФункции));
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

&НаКлиенте
Процедура _послеИзмененияЦены_ОВ(_, __) Экспорт
    ЭтотОбъект.ТекущаяРозничнаяЦена = РаботаСЦенамиВызовСервера.ПолучитьЦенуПродажиНаДату(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область Инициализация

&НаКлиенте
Процедура инициализация()
    контекстДиагностики = получитьКонтекстДиагностики("инициализация");

    предопределенныеДанные = получитьПредопределенныеДанные();
    ДиагностикаКлиентСервер.Утверждение(
        предопределенныеДанные <> Неопределено
        И предопределенныеДанные.ГруппыНоменклатуры.Свойство("Товары")
        И предопределенныеДанные.ГруппыНоменклатуры.Свойство("Материалы")
        И предопределенныеДанные.ГруппыНоменклатуры.Свойство("Услуги"),
        "Не все необходимые предопределенные группы определены.
        |В справочнике ""Номенклатура"" должны быть определены предопределенные группы: [Товары, Материалы, Услуги].",
        контекстДиагностики);

    _ГруппыНоменклатуры = предопределенныеДанные.ГруппыНоменклатуры;
    _ТипыНоменклатуры = предопределенныеДанные.ТипыНоменклатуры;
    _ПланСчетов = предопределенныеДанные.ПланСчетов;
КонецПроцедуры

&НаСервереБезКонтекста
Функция получитьПредопределенныеДанные()
    результат = Новый Структура("ГруппыНоменклатуры, ТипыНоменклатуры, ПланСчетов");

    результат.ГруппыНоменклатуры = РаботаСМетаданными.ПолучитьЗначенияПредопределенных(Тип("СправочникСсылка.Номенклатура"));

    //! В последующих версиях метод Справочники.Номенклатура.ПолучитьТипыНоменклатуры - должен возвращать ФиксированнаяСтруктура
    результат.ТипыНоменклатуры = Новый ФиксированнаяСтруктура(
            Справочники.Номенклатура.ПолучитьТипыНоменклатуры());

    результат.ПланСчетов = ПланыСчетов.Хозрасчетный.ПолучитьЗначенияПланаСчетов();

    Возврат Новый ФиксированнаяСтруктура(результат);
КонецФункции

#КонецОбласти
