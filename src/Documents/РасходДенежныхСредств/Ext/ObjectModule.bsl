#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, __, ___)
    заполнитьДокументНаОсновании(данныеЗаполнения);
    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    выполнитьВсеДвиженияДенежныеСредстваРасход(отказ, Истина, Истина);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  данныеЗаполнения - ДокументСсылка.ПоступлениеУслуг, ДокументСсылка.ПоступленияТоваров
//  - ДокументСсылка.РеализацияТоваровИУслуг, Неопределено - Ссылка на документ основание
//
// Возвращаемое значение:
//  - Булево
Функция заполнитьДокументНаОсновании(Знач данныеЗаполнения)
    Если данныеЗаполнения = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    // Если тип документа основания не соответствует ожидаемым типам
    типДокументаОСнования = ТипЗнч(данныеЗаполнения);
    Если НЕ (типДокументаОСнования = Тип("ДокументСсылка.ПоступлениеУслуг")
            ИЛИ типДокументаОСнования = Тип("ДокументСсылка.ПоступленияТоваров")
            ИЛИ типДокументаОСнования = Тип("ДокументСсылка.РеализацияТоваровИУслуг")) Тогда

        Возврат Ложь;
    КонецЕсли;

    ДокументОснование = данныеЗаполнения.Ссылка;
    СуммаДокумента = данныеЗаполнения.СуммаДокумента;

    Если типДокументаОСнования = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
        ВидОперации = Перечисления.ВидыОперацийРасходаДенег.ВозвратДенегПокупателю;
        Получатель = данныеЗаполнения.Клиент;

    Иначе // Это Поступление Товаров или Услуг
        ВидОперации = Перечисления.ВидыОперацийРасходаДенег.ОплатаПоставщику;
        Получатель = данныеЗаполнения.Поставщик;
        ДоговорКонтрагента = данныеЗаполнения.ДоговорПоставщика;
    КонецЕсли;

    Возврат Истина;
КонецФункции

Процедура выполнитьДвижениеДенежныеСредстваРасход(строкаРасходДС)
    движение = Движения.ДенежныеСредства.ДобавитьРасход();
    ЗаполнитьЗначенияСвойств(движение, строкаРасходДС);
КонецПроцедуры

Процедура выполнитьВсеДвиженияДенежныеСредстваРасход(отказ, Знач записывать = Истина, Знач контролироватьОстатки = Истина)
    выборкаРасходДС = получитьВыборкуДокументРасходДенежныхСредств(Ссылка);
    Если выборкаРасходДС = Неопределено Тогда
        Возврат;
    КонецЕсли;

    Пока выборкаРасходДС.Следующий() Цикл
        выполнитьДвижениеДенежныеСредстваРасход(выборкаРасходДС);
    КонецЦикла;

    Если записывать Тогда
        Движения.ДенежныеСредства.Записывать = Истина;
        Движения.ДенежныеСредства.БлокироватьДляИзменения = Истина;

        Движения.Записать();
    КонецЕсли;

    Если контролироватьОстатки Тогда
        остаток = проверитьОстаткиДенежныхСредствПоКассе(ЭтотОбъект.Касса);

        Если остаток <> Неопределено Тогда
            отказ = Истина;
            остаток.Следующий();
            сообщениеПользователю = Новый СообщениеПользователю;
            сообщениеПользователю.Текст =
                СтрШаблон("По кассе ""%1"" недостаточно денежных средств для расхода в размере %2", остаток.Касса, остаток.Сумма);
            сообщениеПользователю.Сообщить();
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

Функция получитьВыборкуДокументРасходДенежныхСредств(документСсылка) // => Выборка | Неопределено
    запросРасходДС = Новый Запрос;
    запросРасходДС.УстановитьПараметр("Ссылка", документСсылка);

    запросРасходДС.Текст =
        "ВЫБРАТЬ
        |	РасходДенежныхСредств.Дата КАК Период,
        |	РасходДенежныхСредств.Касса КАК БанковскийСчетКасса,
        |	РасходДенежныхСредств.СуммаДокумента КАК Сумма,
        |	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные) КАК ТипДенежныхСредств
        |ИЗ
        |	Документ.РасходДенежныхСредств КАК РасходДенежныхСредств
        |ГДЕ
        |	РасходДенежныхСредств.Ссылка = &Ссылка
        |
        |СГРУППИРОВАТЬ ПО
        |	РасходДенежныхСредств.Дата,
        |	РасходДенежныхСредств.Касса,
        |	РасходДенежныхСредств.СуммаДокумента
        |";

    результатЗапроса = запросРасходДС.Выполнить();
    Если результатЗапроса.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;

    Возврат результатЗапроса.Выбрать();
КонецФункции

// Выполняет поиск строки в {РегистреНакопления.ДенежныеСредства.Остатки}\
// с отрицательным значение поля СуммаОстаток по у казанной кассе.
// В случае если строка найдена - возвращает в виде { Касса: Строка, Сумма: Число }, иначе Неопределено
//
// Параметры:
//	касса - СправочникСсылка.Кассы
//
// Возвращаемое значение:
//	- Выборка, Неопределено
Функция проверитьОстаткиДенежныхСредствПоКассе(касса = Неопределено) // => { Касса: Строка, Сумма: Число } | Неопределено
    касса = ?(касса = Неопределено, ЭтотОбъект.Касса, касса);

    запросОстаткиДС = Новый Запрос;
    запросОстаткиДС.УстановитьПараметр("Касса", касса);
    запросОстаткиДС.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени()));

    запросОстаткиДС.Текст =
        "ВЫБРАТЬ
        |	ДенежныеСредстваОстатки.БанковскийСчетКасса.Представление КАК Касса,
        |	ДенежныеСредстваОстатки.СуммаОстаток КАК Сумма
        |ИЗ
        |	РегистрНакопления.ДенежныеСредства.Остатки(
        |		&МоментВремени,
        |		БанковскийСчетКасса = &Касса
        |			И ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)) КАК ДенежныеСредстваОстатки
        |ГДЕ
        |   ДенежныеСредстваОстатки.СуммаОстаток < 0
        |";

    результатЗапроса = запросОстаткиДС.Выполнить();
    Если результатЗапроса.Пустой() Тогда
        Возврат Неопределено;
    КонецЕсли;

    выборка = результатЗапроса.Выбрать();

    Возврат выборка;
КонецФункции

#КонецОбласти
