#Область ОписаниеПеременных

// Хранит названия табличных частей и наименования столбцов необходимые
// для расчета суммы документа
&НаКлиенте
Перем _ПоляРасчетаСуммыДокумента;

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(отказ, __)
    Если Параметры.Свойство("Основание")
        И ЗначениеЗаполнено(Параметры.Основание)
        И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РеализацияТоваровИУслуг") Тогда
        структураОплаты = Документы.РеализацияТоваровИУслуг.ПроверитьОплатуДокумента(Параметры.Основание);

        Если структураОплаты.ПризнакОплаты = Перечисления.ПризнакиОплаты.ПолностьюОплачен Тогда
            сообщениеПользователю = Новый СообщениеПользователю();
            сообщениеПользователю.Текст = "Данный документ уже полностью оплачен. Ввод дополнительного документа оплаты не требуется!";
            сообщениеПользователю.Сообщить();
            отказ = Истина;
            Возврат;
        Иначе
            Объект.СуммаДокумента = структураОплаты.ОсталосьОплатить;
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(_)
    _ПоляРасчетаСуммыДокумента = получитьПоляИтогов();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(_)
    текущСтрокаТовары = Элементы.Товары.ТекущиеДанные;
    Если НЕ текущСтрокаТовары.Номенклатура.Пустая() Тогда
        текущСтрокаТовары.ТипНоменклатуры = определитьТипНоменклатурыНаСервере(текущСтрокаТовары.Номенклатура);
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(_)
    рассчитатьСуммуПоСтрокеТовары();
    обновитьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(_)
    рассчитатьСуммуПоСтрокеТовары();
    обновитьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(_)
    обновитьСуммуДокумента();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыТовары

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура рассчитатьСуммуПоСтрокеТовары()
    текущСтрокаТовары = Элементы.Товары.ТекущиеДанные;
    текущСтрокаТовары.Сумма = текущСтрокаТовары.Цена * текущСтрокаТовары.Количество;
    обновитьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Функция рассчитатьСуммуДокумента()
    Возврат РаботаСДокументамиКлиентСервер.РассчитатьСуммуДокумента(Объект, _ПоляРасчетаСуммыДокумента);
КонецФункции

&НаКлиенте
Процедура обновитьСуммуДокумента()
    Объект.СуммаДокумента = рассчитатьСуммуДокумента();
КонецПроцедуры

&НаСервереБезКонтекста
Функция определитьТипНоменклатурыНаСервере(Знач номенклатураСсылка)
    результат = Справочники.Номенклатура.ПолучитьЗначениеТипаНоменклатуры(номенклатураСсылка);
    ДиагностикаКлиентСервер.Утверждение(результат <> Неопределено,
        "Ошибка при получении типа номенклатуры.");

    Возврат результат;
КонецФункции

&НаСервереБезКонтекста
Функция получитьПоляИтогов()
    Возврат Документы.ПоступлениеТоваров.ПолучитьПоляДляРасчетаСуммыДокумента();
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
