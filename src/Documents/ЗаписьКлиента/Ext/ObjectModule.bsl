#Область ПрограммныйИнтерфейс

// Возвращаемое значение:
//  - Дата - Дата окончания услуги, в случае если длительность услуг не определена - учитывает минимальную длительность приема
Функция РассчитатьДатуОкончанияЗаписи() Экспорт
    услугиТЗ = Услуги.Выгрузить( , "Услуга");
    Возврат НачалоМинуты(ДатаЗаписи + Документы.ЗаписьКлиента.РассчитатьДлительностьОказанияУслуг(услугиТЗ) * 60);
КонецФункции

// Определяет статус оказания услуги (оказана | не оказана) устанавливает значение реквизита "УслугаОказана"
Процедура ОбновитьСтатусОказанияУслуги() Экспорт
    УслугаОказана = Документы.ЗаписьКлиента.ПолучитьСтатусОказанияУслуги(Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(_, __, ___)
    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(_, __)
    Движения.ЗаказыКлиентов.Записывать = Истина;
    выполнитьДвижениеЗаказыКлиентовПриход();
КонецПроцедуры

Процедура ПередЗаписью(_, __, ___)
    Если ОбменДанными.Загрузка Тогда
        Возврат;
    КонецЕсли;

    ДатаЗаписи = НачалоМинуты(ДатаЗаписи);
    ДатаОкончанияЗаписи = РассчитатьДатуОкончанияЗаписи();
    ОбновитьСтатусОказанияУслуги();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

Процедура выполнитьДвижениеЗаказыКлиентовПриход()
    движение = Движения.ЗаказыКлиентов.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    движение.Период = Дата;
    движение.Клиент = Клиент;
    движение.ЗаписьКлиента = Ссылка;
    движение.Сумма = Услуги.Итог("Стоимость");
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
