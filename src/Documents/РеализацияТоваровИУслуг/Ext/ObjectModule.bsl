#Область ПрограммныйИнтерфейс

// Обновляет поле СуммаДокумента.\
// Для корректной рабаты все суммы по строкам ТЧ должны быть предварительно рассчитаны.\
// =========================\
// [примечание разработчика] - в текущей реализации (Спринт 4) не используется.
// Обновление суммы документа выполняется в процессе заполнения формы.
//
Процедура ОбновитьСуммуДокумента() Экспорт
    опцииРасчета_ = Документы.РеализацияТоваровИУслуг.ПолучитьПоляДляРасчетаСуммыДокумента();
    сумма_ = РаботаСДокументамиКлиентСервер.РассчитатьСуммуДокумента(ЭтотОбъект, опцииРасчета_);
    СуммаДокумента = сумма_;
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, __, ___)
    Если ТипЗнч(данныеЗаполнения) = Тип("ДокументСсылка.ЗаписьКлиента") Тогда
        ДатаОказанияУслуги = данныеЗаполнения.ДатаЗаписи;
        Клиент = данныеЗаполнения.Клиент;
        Сотрудник = данныеЗаполнения.Сотрудник;
        Основание = данныеЗаполнения.Ссылка;

        Для Каждого текСтрокаУслуги_ Из данныеЗаполнения.Услуги Цикл
            новаяСтрока_ = Услуги.Добавить();
            новаяСтрока_.Стоимость = текСтрокаУслуги_.Стоимость;
            новаяСтрока_.Услуга = текСтрокаУслуги_.Услуга;
            СуммаДокумента = СуммаДокумента + текСтрокаУслуги_.Стоимость;
        КонецЦикла;
    КонецЕсли;

    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    очиститьДвиженияДокумента();
    выполнитьВсеДвиженияДокумента(отказ);

    Если НЕ отказ Тогда
        записатьДвижения();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыДанных
// Получает выборку Номенклатуры текущего документа и остатки на складе по товарам
//
// Параметры:
//  менеджерТаблиц - МенеджерВременныхТаблиц
//
// Возвращаемое значение:
//  - Выборка
//
Функция получитьВыборкуНоменклатураДокументаИОстатки(менеджерТаблиц) // => Выборка
    запросНоменклатуры_ = Новый Запрос;
    запросНоменклатуры_.МенеджерВременныхТаблиц = менеджерТаблиц;
    запросНоменклатуры_.УстановитьПараметр("Ссылка", Ссылка);
    запросНоменклатуры_.УстановитьПараметр("Склад", Склад);
    запросНоменклатуры_.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени()));

    текстЗапросаТоваровИУслугДокумента_ =
        "ВЫБРАТЬ    // Товары
        |	РеализацияТоваровИУслугТовары.Товар КАК Номенклатура,
        |	&СКЛАД КАК Склад,
        |	СУММА(РеализацияТоваровИУслугТовары.Количество) КАК Количество,
        |	СУММА(РеализацияТоваровИУслугТовары.Сумма) КАК Сумма
        |
        |ПОМЕСТИТЬ ВТ_Товары
        |
        |ИЗ
        |	Документ.РеализацияТоваровИУслуг.Товары КАК РеализацияТоваровИУслугТовары
        |
        |ГДЕ
        |	РеализацияТоваровИУслугТовары.Ссылка = &Ссылка
        |
        |СГРУППИРОВАТЬ ПО
        |	РеализацияТоваровИУслугТовары.Товар
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ    // Услуги
        |	РеализацияТоваровИУслугУслуги.Услуга,
        |	NULL,
        |	NULL,
        |	СУММА(РеализацияТоваровИУслугУслуги.Стоимость)
        |
        |ИЗ
        |	Документ.РеализацияТоваровИУслуг.Услуги КАК РеализацияТоваровИУслугУслуги
        |
        |ГДЕ
        |	РеализацияТоваровИУслугУслуги.Ссылка = &Ссылка
        |
        |СГРУППИРОВАТЬ ПО
        |	РеализацияТоваровИУслугУслуги.Услуга
        |
        |ИНДЕКСИРОВАТЬ ПО
        |	Номенклатура
        |;
        |";

    текстЗапросаОстатковПоТоварам_ =
        "ВЫБРАТЬ
        |	ВТ_Товары.Номенклатура КАК Номенклатура,
        |	ВЫБОР
        |		КОГДА ВТ_Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
        |			ТОГДА ЛОЖЬ
        |		ИНАЧЕ ИСТИНА
        |	КОНЕЦ КАК ЭтоТовар,
        |	ВТ_Товары.Номенклатура.Представление КАК НоменклатураПредставление,
        |	ВТ_Товары.Количество КАК КоличествоВДокументе,
        |	ВТ_Товары.Сумма КАК СуммаВДокументе,
        |	ВТ_Товары.Склад КАК Склад,
        |	ТоварыНаСкладахОстатки.СрокГодности КАК СрокГодности,
        |	ЕстьNULL(ТоварыНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
        |	ЕстьNULL(ТоварыНаСкладахОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
        |	ВТ_Товары.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат
        |
        |ИЗ
        |	ВТ_Товары КАК ВТ_Товары
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
        |			&МоментВремени,
        |			(Номенклатура, Склад) В (
        |				ВЫБРАТЬ
        |					ВТ_Товары.Номенклатура,
        |					ВТ_Товары.Склад
        |				ИЗ
        |					ВТ_Товары КАК ВТ_Товары)) КАК ТоварыНаСкладахОстатки
        |
        |		ПО ВТ_Товары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
        |			И ВТ_Товары.Склад = ТоварыНаСкладахОстатки.Склад
        |
        |УПОРЯДОЧИТЬ ПО
        |	ТоварыНаСкладахОстатки.СрокГодности
        |
        |ИТОГИ
        |	МАКСИМУМ(КоличествоВДокументе),
        |	МАКСИМУМ(СуммаВДокументе),
        |	СУММА(КоличествоОстаток)
        |
        |ПО
        |	Номенклатура
        |";

    запросНоменклатуры_.Текст = СтрШаблон("%1%2", текстЗапросаТоваровИУслугДокумента_, текстЗапросаОстатковПоТоварам_);

    Возврат запросНоменклатуры_.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции

#КонецОбласти // ЗапросыДанных

#Область Движения
Процедура записатьДвижения()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.ЗаказыКлиентов.Записывать = Истина;
КонецПроцедуры

Процедура очиститьДвиженияДокумента()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.ЗаказыКлиентов.Записывать = Истина;

    Движения.Записать();
КонецПроцедуры

Процедура выполнитьВсеДвиженияДокумента(отказ = Ложь)
    запретПроведенияПриОтрицательныхОстатках_ = Константы.ЗапретПроведенияПриОтрицательныхОстатках.Получить();

    менеджерТаблиц_ = Новый МенеджерВременныхТаблиц;

    блокировка_ = получитьБлокировкуИзмененияТоварыНаСкладах();
    блокировка_.Заблокировать();

    выборкаНоменклатураДокумента_ = получитьВыборкуНоменклатураДокументаИОстатки(менеджерТаблиц_);
    Пока выборкаНоменклатураДокумента_.Следующий() Цикл

        Если выборкаНоменклатураДокумента_.ЭтоТовар Тогда
            количествоОстатков_ = выборкаНоменклатураДокумента_.КоличествоОстаток - выборкаНоменклатураДокумента_.КоличествоВДокументе;

            Если количествоОстатков_ < 0 Тогда
                сообщитьПользователюОПревышенииОстатков(
                    -количествоОстатков_,
                    выборкаНоменклатураДокумента_.НоменклатураПредставление);

                Если запретПроведенияПриОтрицательныхОстатках_ Тогда
                    отказ = Истина;
                    Продолжить;
                КонецЕсли;
            КонецЕсли;

            стоимостьОбщая_ = 0;
            текущийОстатокВДокументе = выборкаНоменклатураДокумента_.КоличествоВДокументе;
            выборкаНоменклатураДокументаПоСрокуГодности_ = выборкаНоменклатураДокумента_.Выбрать();
            Пока выборкаНоменклатураДокументаПоСрокуГодности_.Следующий() И текущийОстатокВДокументе > 0 Цикл

                этоОтрицательныйОстаток = выборкаНоменклатураДокумента_.КоличествоВДокументе
                    - текущийОстатокВДокументе > выборкаНоменклатураДокумента_.КоличествоОстаток;

                результатСписания_ = выполнитьДвижениеТоварыНаСкладахРасход(
                        выборкаНоменклатураДокументаПоСрокуГодности_,
                        текущийОстатокВДокументе,
                        этоОтрицательныйОстаток);

                стоимостьОбщая_ = стоимостьОбщая_ + результатСписания_.Сумма;
                текущийОстатокВДокументе = текущийОстатокВДокументе - результатСписания_.Количество;
            КонецЦикла;

            выполнитьДвижениеУчетЗатратОборот(выборкаНоменклатураДокумента_, стоимостьОбщая_);

        Иначе // Услуга

            Если Основание <> Неопределено И НЕ Основание.Пустая() Тогда
                выполнитьДвижениеЗаказыКлиентовРасход(выборкаНоменклатураДокумента_);
            КонецЕсли;
        КонецЕсли;

        выполнитьДвижениеПродажиОборот(выборкаНоменклатураДокумента_);
    КонецЦикла;
КонецПроцедуры

Процедура выполнитьДвижениеПродажиОборот(выборкаНоменклатураДокумента)
    движение_ = Движения.Продажи.Добавить();
    движение_.Период = Дата;
    движение_.Номенклатура = выборкаНоменклатураДокумента.Номенклатура;
    движение_.Сотрудник = Сотрудник;
    движение_.Клиент = Клиент;
    движение_.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
КонецПроцедуры

// Параметры:
//  выборкаТоварыПоПартиям - Выборка - выборка товаров на складе с группировкой по сроку годности
//  текущийОстатокВДокументе - Число - Остаток количества Номенклатуры (Товаров) в документе
//  этоОтрицательныйОстаток - Булево - Указывает закончились ли товары на складе
//
// Возвращаемое значение:
//  - Структура - { Сумма: Число - Стоимость выполненного списания по партии Товаров, Количество: Число - Количество выполненного списания }
//
Функция выполнитьДвижениеТоварыНаСкладахРасход(выборкаТоварыПоПартиям,
        Знач текущийОстатокВДокументе, Знач этоОтрицательныйОстаток) // => Число

    доступноДляСписания_ = ?(этоОтрицательныйОстаток, текущийОстатокВДокументе,
            Мин(выборкаТоварыПоПартиям.КоличествоОстаток, текущийОстатокВДокументе));

    движение_ = Движения.ТоварыНаСкладах.ДобавитьРасход();
    движение_.Период = Дата;
    движение_.Номенклатура = выборкаТоварыПоПартиям.Номенклатура;
    движение_.Склад = выборкаТоварыПоПартиям.Склад;
    движение_.СрокГодности = выборкаТоварыПоПартиям.СрокГодности;
    движение_.Количество = доступноДляСписания_;
    Если доступноДляСписания_ = выборкаТоварыПоПартиям.КоличествоОстаток ИЛИ этоОтрицательныйОстаток Тогда
        движение_.Сумма = выборкаТоварыПоПартиям.СуммаОстаток;
    Иначе
        движение_.Сумма = доступноДляСписания_ / выборкаТоварыПоПартиям.КоличествоОстаток
            * выборкаТоварыПоПартиям.СуммаОстаток;
    КонецЕсли;

    результатСписания_ = Новый Структура("Сумма, Количество", движение_.Сумма, движение_.Количество);

    Возврат результатСписания_;
КонецФункции

Процедура выполнитьДвижениеУчетЗатратОборот(выборкаНоменклатураДокумента, Знач стоимостьОбщая)
    движение_ = Движения.УчетЗатрат.Добавить();
    движение_.Период = Дата;
    движение_.СтатьяЗатрат = выборкаНоменклатураДокумента.СтатьяЗатрат;
    движение_.Сумма = стоимостьОбщая;
КонецПроцедуры

Процедура выполнитьДвижениеЗаказыКлиентовРасход(выборкаНоменклатураДокумента)
    движение_ = Движения.ЗаказыКлиентов.Добавить();
    движение_.ВидДвижения = ВидДвиженияНакопления.Расход;

    движение_.Период = Дата;
    движение_.Клиент = Клиент;
    движение_.ЗаписьКлиента = Основание;
    движение_.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
КонецПроцедуры
#КонецОбласти // Движения

// Параметры:
//	превышениеОстатков - Число - Количество превышения остатков
//	наименованиеНоменклатуры - Строка - Наименование Номенклатуры, используется в тексте сообщения
//
Процедура сообщитьПользователюОПревышенииОстатков(Знач превышениеОстатков, Знач наименованиеНоменклатуры)
    сообщение_ = Новый СообщениеПользователю;
    сообщение_.Текст = СтрШаблон("Превышение остатка по номенклатуре: ""%1"" в количестве: ""%2""",
            наименованиеНоменклатуры, превышениеОстатков);
    сообщение_.Сообщить();
КонецПроцедуры

Функция получитьБлокировкуИзмененияТоварыНаСкладах() // => БлокировкаДанных
    блокировка_ = Новый БлокировкаДанных;
    элементБлокировки_ = блокировка_.Добавить("РегистрНакопления.ТоварыНаСкладах");
    элементБлокировки_.Режим = РежимБлокировкиДанных.Исключительный;
    элементБлокировки_.ИсточникДанных = Товары;
    элементБлокировки_.ИспользоватьИзИсточникаДанных("Номенклатура", "Товар");
    элементБлокировки_.УстановитьЗначение("Склад", Склад);

    Возврат блокировка_;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
