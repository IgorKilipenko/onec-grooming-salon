#Область ПрограммныйИнтерфейс

// Устарела. В текущей реализации не используется.
// Обновление суммы документа выполняется в процессе заполнения формы.\
// Обновляет поле СуммаДокумента.\
// Для корректной рабаты все суммы по строкам ТЧ должны быть предварительно рассчитаны.\
//
Процедура ОбновитьСуммуДокумента() Экспорт
    опцииРасчета = Документы.РеализацияТоваровИУслуг.ПолучитьПоляДляРасчетаСуммыДокумента();
    сумма = РаботаСДокументамиКлиентСервер.РассчитатьСуммуДокумента(ЭтотОбъект, опцииРасчета);
    ЭтотОбъект.СуммаДокумента = сумма;
КонецПроцедуры

// Параметры:
//  принудительно - Булево - Если Ложь - проверяет только если признак оплаты не установлен ранее.
//  По Умолчанию - Истина
Процедура ОбновитьСтатусОплатыДокумента(Знач принудительно = Истина) Экспорт
    Если принудительно ИЛИ ЭтотОбъект.ПризнакОплаты <> Перечисления.ПризнакиОплаты.ПолностьюОплачен Тогда
        ЭтотОбъект.ПризнакОплаты = Документы.РеализацияТоваровИУслуг.ПроверитьОплатуДокумента(Ссылка).ПризнакОплаты;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(данныеЗаполнения, __)
    Если ТипЗнч(данныеЗаполнения) = Тип("ДокументСсылка.ЗаписьКлиента") Тогда
        ЭтотОбъект.Клиент = данныеЗаполнения.Клиент;

        Если данныеЗаполнения.УслугаОказана Тогда // Ошибка! Попытка повторной реализации услуг по записи клиента
            сообщениеОшибки = СтрШаблон(
                    "Данная запись клиента ""%1"" от ""%2"" оказана и учтена в документах реализации услуг.
                    |Нельзя создавать документ реализации на основании закрытой или отмененной записи клиента.",
                    ЭтотОбъект.Клиент, данныеЗаполнения.ДатаЗаписи);

            ВызватьИсключение сообщениеОшибки;

        Иначе
            ЭтотОбъект.Сотрудник = данныеЗаполнения.Сотрудник;
            ЭтотОбъект.ДокументОснование = данныеЗаполнения.Ссылка;
            Для Каждого текСтрокаУслуги Из данныеЗаполнения.Услуги Цикл
                новаяСтрока = Услуги.Добавить();
                новаяСтрока.Стоимость = текСтрокаУслуги.Стоимость;
                новаяСтрока.Услуга = текСтрокаУслуги.Услуга;
                ЭтотОбъект.СуммаДокумента =
                    ЭтотОбъект.СуммаДокумента + текСтрокаУслуги.Стоимость;
            КонецЦикла;
        КонецЕсли;
    КонецЕсли;

    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    очиститьДвиженияДокумента();
    результатВыполненияДвижений = выполнитьВсеДвиженияДокумента();
    Если НЕ результатВыполненияДвижений.Отказ Тогда
        записатьДвижения();
        обновитьСтатусОказанияУслуги();
    Иначе
        отказ = Истина;
    КонецЕсли;
КонецПроцедуры


#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыДанных
// Получает выборку Номенклатуры текущего документа и остатки на складе по товарам
// Параметры:
//  менеджерТаблиц - МенеджерВременныхТаблиц, Неопределено
// Возвращаемое значение:
//  - ВыборкаИзРезультатаЗапроса
Функция получитьВыборкуНоменклатураДокументаИОстатки(Знач менеджерТаблиц)
    менеджерТаблиц = ?(менеджерТаблиц = Неопределено, Новый МенеджерВременныхТаблиц, менеджерТаблиц);

    Возврат Документы.РеализацияТоваровИУслуг.ПолучитьВыборкуНоменклатурыДокументаИОстатки(
        ЭтотОбъект.Ссылка, ЭтотОбъект.Склад, Новый Граница(ЭтотОбъект.МоментВремени()));
КонецФункции
#КонецОбласти // ЗапросыДанных

#Область Движения
Процедура записатьДвижения()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;

    // Для контроля остатков по новому способу
    // От этой строки можно избавиться, т.к. запись включается при контроле остатков
    Движения.ЗаказыКлиентов.Записывать = Истина;
    Движения.ЗаказыКлиентов.Записать();
КонецПроцедуры

Процедура очиститьДвиженияДокумента()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;

    Движения.Записать();
КонецПроцедуры

Функция выполнитьВсеДвиженияДокумента()
    результатВыполнения = Новый Структура("Отказ", Ложь);

    запретПроведенияПриОтрицательныхОстатках = Константы.ЗапретПроведенияПриОтрицательныхОстатках.Получить();

    менеджерТаблиц = Новый МенеджерВременныхТаблиц;

    блокировка = получитьБлокировкуИзмененияТоварыНаСкладах();
    блокировка.Заблокировать();

    этоРеализацияНаОснованииЗаписиКлиента = получитьЭтоРеализацияНаОснованииЗаписиКлиента();
    выборкаПартияНоменклатуры = получитьВыборкуНоменклатураДокументаИОстатки(менеджерТаблиц);
    Пока выборкаПартияНоменклатуры.Следующий() Цикл
        этоТовар = выборкаПартияНоменклатуры.ЭтоТовар;
        Если этоТовар Тогда
            количествоОстатков = выборкаПартияНоменклатуры.КоличествоОстаток - выборкаПартияНоменклатуры.КоличествоВДокументе;

            Если количествоОстатков < 0 Тогда
                сообщитьПользователюОПревышенииОстатков(
                    -количествоОстатков,
                    выборкаПартияНоменклатуры.НоменклатураПредставление);

                Если запретПроведенияПриОтрицательныхОстатках Тогда
                    результатВыполнения.Отказ = Истина;
                КонецЕсли;
            КонецЕсли;

            Если результатВыполнения.Отказ Тогда
                Продолжить;
            КонецЕсли;

            стоимостьОбщая = выполнитьДвиженияТоварыНаСкладахРасходПартииТоваров(выборкаПартияНоменклатуры,
                    запретПроведенияПриОтрицательныхОстатках);
            выполнитьДвижениеУчетЗатратОборот(выборкаПартияНоменклатуры, стоимостьОбщая);
        Иначе // Услуга
            выполнитьДвижениеЗаказыКлиентовРасход(выборкаПартияНоменклатуры);
            Если этоРеализацияНаОснованииЗаписиКлиента Тогда
                // контрольЗаказовУспешно = выполнитьКонтрольОстатковДляЗаказыКлиентов(менеджерТаблиц);
                // Если НЕ контрольЗаказовУспешно Тогда
                //     результатВыполнения.Отказ = Истина;
                //     Продолжить;
                // КонецЕсли;
            КонецЕсли;
        КонецЕсли;

        Если НЕ результатВыполнения.Отказ Тогда
            выполнитьДвижениеПродажиОборот(выборкаПартияНоменклатуры);
        КонецЕсли;
    КонецЦикла;

    Если НЕ результатВыполнения.Отказ Тогда
        выполнитьДвижениеБУХозрасчетныйВыручкаОтПродаж();
    КонецЕсли;

    Возврат результатВыполнения;
КонецФункции

Процедура выполнитьДвиженияБУХозрасчетныйСписаниеПартииТоваров(Знач счетКт, Знач номенклатураСсылка, Знач суммаСписания)
    движение = Движения.Хозрасчетный.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = суммаСписания;
    движение.СчетДт = ПланыСчетов.Хозрасчетный.Продажи;
    движение.СчетКт = счетКт;
    движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = номенклатураСсылка;
    движение.Содержание = "Списана себестоимость товарно-материальных ценностей";
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетныйВыручкаОтПродаж()
    движение = Движения.Хозрасчетный.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = ЭтотОбъект.СуммаДокумента;
    движение.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
    движение.СчетКт = ПланыСчетов.Хозрасчетный.Продажи;
    БухгалтерскийУчет.ЗаполнитьСубконтоПоСчету(движение.СчетДт, движение.СубконтоДт, Клиент);
    движение.Содержание = "Отражена выручка от реализации товаров и услуг";
КонецПроцедуры

Процедура выполнитьДвижениеПродажиОборот(Знач выборкаНоменклатураДокумента)
    движение = Движения.Продажи.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = выборкаНоменклатураДокумента.Номенклатура;
    движение.Сотрудник = ЭтотОбъект.Сотрудник;
    движение.Клиент = ЭтотОбъект.Клиент;
    движение.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
КонецПроцедуры

Функция выполнитьДвиженияТоварыНаСкладахРасходПартииТоваров(
        Знач выборкаНоменклатураДокумента, Знач запретПроведенияПриОтрицательныхОстатках)

    общаяСтоимостьНоменклатуры = 0;
    несписанныйОстаток = выборкаНоменклатураДокумента.КоличествоВДокументе;

    выборкаНоменклатураДокументаПоСрокуГодности = выборкаНоменклатураДокумента.Выбрать();
    количествоГруппТоваров = выборкаНоменклатураДокументаПоСрокуГодности.Количество();
    Пока выборкаНоменклатураДокументаПоСрокуГодности.Следующий() И несписанныйОстаток > 0 Цикл
        // Выполняем проводку по регистру ТоварыНаСкладах для партии товаров
        результатСписания = выполнитьДвижениеТоварыНаСкладахРасход(
                выборкаНоменклатураДокументаПоСрокуГодности,
                несписанныйОстаток);

        общаяСтоимостьНоменклатуры = общаяСтоимостьНоменклатуры + результатСписания.Сумма;
        несписанныйОстаток = несписанныйОстаток - результатСписания.Количество;

        // Выполняем проводку по регистру бухгалтерии для партии товаров
        выполнитьДвиженияБУХозрасчетныйСписаниеПартииТоваров(выборкаНоменклатураДокументаПоСрокуГодности.СчетБухгалтерскогоУчета,
            выборкаНоменклатураДокументаПоСрокуГодности.Номенклатура, результатСписания.Сумма);

        // Код выполняется при отключенной опции ЗапретПроведенияПриОтрицательныхОстатках
        // и формирует отрицательный остаток по номенклатуре
        Если НЕ запретПроведенияПриОтрицательныхОстатках Тогда
            количествоГруппТоваров = количествоГруппТоваров - 1;
            Если количествоОстатков < 0 И количествоГруппТоваров = 0 Тогда
                выполнитьДвижениеТоварыНаСкладахРасход(
                    выборкаНоменклатураДокументаПоСрокуГодности,
                    несписанныйОстаток, Истина);
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;

    Возврат общаяСтоимостьНоменклатуры;
КонецФункции

// Параметры:
//  выборкаТоварыПоПартиям - Выборка - выборка товаров на складе с группировкой по сроку годности
//  текущийОстатокВДокументе - Число - Остаток количества Номенклатуры (Товаров) в документе
//  этоОтрицательныйОстаток - Булево - Указывает закончились ли товары на складе
//
// Возвращаемое значение:
//  - Структура - { Сумма: Число - Стоимость выполненного списания по партии Товаров, Количество: Число - Количество выполненного списания }
//
Функция выполнитьДвижениеТоварыНаСкладахРасход(выборкаТоварыПоПартиям,
        Знач текущийОстатокВДокументе, Знач этоОтрицательныйОстаток = Ложь) // => Число

    доступноДляСписания = ?(этоОтрицательныйОстаток, текущийОстатокВДокументе,
            Мин(выборкаТоварыПоПартиям.КоличествоОстаток, текущийОстатокВДокументе));

    движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
    движение.Период = Дата;
    движение.Номенклатура = выборкаТоварыПоПартиям.Номенклатура;
    движение.Склад = выборкаТоварыПоПартиям.Склад;
    движение.СрокГодности = выборкаТоварыПоПартиям.СрокГодности;
    движение.Количество = доступноДляСписания;
    Если доступноДляСписания = выборкаТоварыПоПартиям.КоличествоОстаток ИЛИ этоОтрицательныйОстаток Тогда
        движение.Сумма = выборкаТоварыПоПартиям.СуммаОстаток;
    Иначе
        движение.Сумма = доступноДляСписания / выборкаТоварыПоПартиям.КоличествоОстаток
            * выборкаТоварыПоПартиям.СуммаОстаток;
    КонецЕсли;

    результатСписания = Новый Структура("Сумма, Количество", движение.Сумма, движение.Количество);

    Возврат результатСписания;
КонецФункции

Процедура выполнитьДвижениеУчетЗатратОборот(Знач выборкаНоменклатураДокумента, Знач стоимостьОбщая)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = выборкаНоменклатураДокумента.СтатьяЗатрат;
    движение.Сумма = стоимостьОбщая;
КонецПроцедуры

Процедура выполнитьДвижениеЗаказыКлиентовРасход(Знач выборкаНоменклатураДокумента)
    движение = Движения.ЗаказыКлиентов.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Расход;

    движение.Период = ЭтотОбъект.Дата;
    движение.Клиент = ЭтотОбъект.Клиент;
    движение.ЗаписьКлиента = ДокументОснование;
    движение.Сумма = выборкаНоменклатураДокумента.СуммаВДокументе;
КонецПроцедуры

// Выполняет проверку достаточности остатков по Номенклатуре.\
// В случае отсутствия достаточного количества остатков - оповещает Пользователя.
//
// Параметры:
//	количествоВДокументе - Число - Количество Номенклатуры в документе для движения
//	остаток - Число - Остаток Номенклатуры на складах
//	наименованиеНоменклатуры - Строка - Наименование Номенклатуры, используется в тексте сообщения
//
// Возвращаемое значение:
//	Булево - Истина если остатков нехватает, иначе Ложь
//
Функция проверитьПревышениеОстатков(Знач количествоВДокументе, Знач остаток, Знач наименованиеНоменклатуры)
    превышениеОстатковНоменклатуры = количествоВДокументе - остаток;
    Если превышениеОстатковНоменклатуры > 0 Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон("Превышение остатка по номенклатуре: ""%1"" в количестве: ""%2""",
                наименованиеНоменклатуры, превышениеОстатковНоменклатуры);
        сообщение.Сообщить();
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции
#КонецОбласти // Движения

// Выполняет контроль остатков в РегистрНакопления.ЗаказыКлиентов.\
//
// Параметры:
//	менеджерТаблиц - МенеджерВременныхТаблиц - должен содержать ранее заполненную
//	временную таблицу ВТ_Товары
//
// Возвращаемое значение:
//	Булево - Истина: если превышения остатков нет (Успех),
//	Ложь если обнаружены превышения остатков (Проверка не пройдена).
//
Функция выполнитьКонтрольОстатковДляЗаказыКлиентов(Знач менеджерТаблиц) // => Булево
    Движения.ЗаказыКлиентов.БлокироватьДляИзменения = Истина;
    Движения.ЗаказыКлиентов.Записать();

    выборкаПревышенияОстатков = получитьВыборкуПревышенияОстатковЗаказыКлиентов(менеджерТаблиц);

    Если выборкаПревышенияОстатков = Неопределено Тогда
        Возврат Истина; // Превышения остатков нет - Успех.
    КонецЕсли;

    Пока выборкаПревышенияОстатков.Следующий() Цикл
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст =
            СтрШаблон("Услуга: ""%1"" для клиента: ""%2"" на дату: ""%3"" уже была обработана или не была найдена такая запись!",
                выборкаПревышенияОстатков.НоменклатураПредставление, выборкаПревышенияОстатков.КлиентПредставление,
                Формат(выборкаПревышенияОстатков.ДатаЗаписи, "ДФ=dd.MM.yy"));
        Сообщение.Сообщить();
    КонецЦикла;

    Возврат Ложь; // Обнаружены превышения остатков - Проверка не пройдена
КонецФункции
#КонецОбласти // Движения

Функция получитьБлокировкуИзмененияТоварыНаСкладах() // => БлокировкаДанных
    блокировка = Новый БлокировкаДанных;
    элементБлокировки = блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
    элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    элементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
    элементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Товар");
    элементБлокировки.УстановитьЗначение("Склад", ЭтотОбъект.Склад);

    Возврат блокировка;
КонецФункции

Функция получитьЭтоРеализацияНаОснованииЗаписиКлиента()
    Возврат ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование) И ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаписьКлиента");
КонецФункции

Функция обновитьСтатусОказанияУслуги()
    Если ЗначениеЗаполнено(ДокументОснование) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаписьКлиента") Тогда
        записьКлиентаОбъект = ДокументОснование.ПолучитьОбъект();
        Если НЕ записьКлиентаОбъект.Заблокирован() Тогда
            записьКлиентаОбъект.ОбновитьСтатусОказанияУслуги();
            записьКлиентаОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
        КонецЕсли;
    КонецЕсли;

    Возврат Ложь;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
