#Область ПрограммныйИнтерфейс

// Устарела.
// Не используется. Обновление суммы документа выполняется в процессе заполнения формы.
//
// Обновляет поле СуммаДокумента.\
// Для корректной рабаты все суммы по строкам ТЧ должны быть предварительно рассчитаны.
Процедура ОбновитьСуммуДокумента() Экспорт
    опцииРасчета = Документы.ПоступлениеТоваров.ПолучитьПоляДляРасчетаСуммыДокумента();
    сумма = РаботаСДокументамиКлиентСервер.РассчитатьСуммуДокумента(ЭтотОбъект, опцииРасчета);
    СуммаДокумента = сумма;
КонецПроцедуры

#КонецОбласти // ПрограммныйИнтерфейс

#Область ОбработчикиСобытий
Процедура ОбработкаПроведения(_, __)
    выполнитьВсеДвижения();
КонецПроцедуры

Процедура ОбработкаЗаполнения(_, __, ___)
    РаботаСДокументами.ЗаполнитьПолеАвторДокументаНаСервере(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область Движения
Процедура выполнитьВсеДвижения()
    отражатьСрокиГодности = получитьУчетнуюПолитику() = Перечисления.ВидыУчетнойПолитики.FEFO;

    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Хозрасчетный.Записывать = Истина;

    выборкаТоварыДокумента = получитьВыборкуТоварыПоПартиям(отражатьСрокиГодности);
    Если выборкаТоварыДокумента = Неопределено Тогда
        Возврат;
    КонецЕсли;

    Пока выборкаТоварыДокумента.Следующий() Цикл
        выполнитьДвижениеТоварыНаСкладах(выборкаТоварыДокумента, отражатьСрокиГодности);
        выполнитьДвижениеБУХозрасчетный(выборкаТоварыДокумента.Номенклатура,
            выборкаТоварыДокумента.СчетБухгалтерскогоУчета, выборкаТоварыДокумента.Сумма);
    КонецЦикла;
КонецПроцедуры

Процедура выполнитьДвижениеБУХозрасчетный(Знач номенклатураСсылка, Знач счетДт, Знач сумма)
    ДиагностикаКлиентСервер.Утверждение(номенклатураСсылка <> Неопределено И счетДт <> Неопределено И сумма <> Неопределено,
        "Все аргументы должны иметь определенные значения.");
    ДиагностикаКлиентСервер.Утверждение(ТипЗнч(счетДт) = Тип("ПланСчетовСсылка.Хозрасчетный"),
        "Аргумент ""СчетДт"" должен иметь значение типа: ""ПланСчетовСсылка.Хозрасчетный"".");

    движение = Движения.Хозрасчетный.Добавить();
    движение.СчетДт = счетДт;
    движение.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
    движение.Период = ЭтотОбъект.Дата;
    движение.Сумма = сумма;
    движение.Содержание = "Отражено поступление товарно-материальных ценностей от поставщика";
    движение.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура] = номенклатураСсылка;
    движение.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты] = ЭтотОбъект.Поставщик;
КонецПроцедуры

Процедура выполнитьДвижениеТоварыНаСкладах(Знач текСтрокаТовары, Знач отражатьСрокиГодности = Ложь)
    движение = Движения.ТоварыНаСкладах.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Приход;
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = текСтрокаТовары.Номенклатура;
    движение.Склад = ЭтотОбъект.Склад;
    движение.Количество = текСтрокаТовары.Количество;
    движение.Сумма = текСтрокаТовары.Сумма;
    Если отражатьСрокиГодности Тогда
        движение.СрокГодности = текСтрокаТовары.СрокГодности;
    КонецЕсли;
КонецПроцедуры
#КонецОбласти // Движения

Функция получитьВыборкуТоварыПоПартиям(Знач отражатьСрокиГодности)
    результат = Документы.ПоступлениеТоваров.ПолучитьВыборкуТовары(ЭтотОбъект.Ссылка, отражатьСрокиГодности);
    ДиагностикаКлиентСервер.Утверждение(результат <> Неопределено,
    "Ошибка получения выборки товаров документа ""ПоступлениеТоваров"".");

    Возврат результат;
КонецФункции

Функция получитьУчетнуюПолитику()
    Возврат РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ЭтотОбъект.Дата).УчетнаяПолитика;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
